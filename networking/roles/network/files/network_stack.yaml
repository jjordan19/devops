AWSTemplateFormatVersion: "2010-09-09"
Description: A template to create a network stack.
# Parameters:
#   SSHKeyName:
#     Type: "AWS::EC2::KeyPair::KeyName"
Resources:
  myVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/24
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags:
      - Key: Name
        Value: MY-VPC-v1
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myVPC
      CidrBlock: 10.0.0.0/27
      AvailabilityZone: "us-east-2a"
      Tags:
      - Key: Name
        Value: MY-PublicSubnet1-v1 
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myVPC
      CidrBlock: 10.0.0.32/27
      AvailabilityZone: "us-east-2b"
      Tags:
      - Key: Name
        Value: MY-PublicSubnet2-v1 
  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myVPC
      CidrBlock: 10.0.0.64/27
      AvailabilityZone: "us-east-2c"
      Tags:
      - Key: Name
        Value: MY-PublicSubnet3-v1 
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myVPC
      CidrBlock: 10.0.0.96/27
      AvailabilityZone: "us-east-2a"
      Tags:
      - Key: Name
        Value: MY-PrivateSubnet1-v1 
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myVPC
      CidrBlock: 10.0.0.128/27
      AvailabilityZone: "us-east-2b"
      Tags:
      - Key: Name
        Value: MY-PrivateSubnet2-v1    
  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myVPC
      CidrBlock: 10.0.0.160/27
      AvailabilityZone: "us-east-2c"
      Tags:
      - Key: Name
        Value: MY-PrivateSubnet3-v1    
  myPublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:  
        Ref: myVPC
      Tags:
      - Key: Name
        Value: MY-PublicRT-v1
  myPrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:  
        Ref: myVPC
      Tags:
      - Key: Name
        Value: MY-PrivateRT1-v1
  myPrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:  
        Ref: myVPC
      Tags:
      - Key: Name
        Value: MY-PrivateRT2-v1
  myPrivateRouteTable3:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:  
        Ref: myVPC
      Tags:
      - Key: Name
        Value: MY-PrivateRT3-v1
  myInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: MY-IGW-v1
  myAttachGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref myVPC
      InternetGatewayId: !Ref myInternetGateway
  myIGWRoute:
    Type: AWS::EC2::Route
    Properties:
       RouteTableId:
         Ref: myPublicRouteTable
       DestinationCidrBlock: 0.0.0.0/0
       GatewayId:
         Ref: myInternetGateway
  myPublicSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet1
      RouteTableId:
        Ref: myPublicRouteTable
  myPublicSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet2
      RouteTableId:
        Ref: myPublicRouteTable
  myPublicSubnetRouteTableAssociation3:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet3
      RouteTableId:
        Ref: myPublicRouteTable
  myPrivateSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PrivateSubnet1
      RouteTableId:
        Ref: myPrivateRouteTable1
  myPrivateSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PrivateSubnet2
      RouteTableId:
        Ref: myPrivateRouteTable2
  myPrivateSubnetRouteTableAssociation3:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PrivateSubnet3
      RouteTableId:
        Ref: myPrivateRouteTable3
  myPublicNetworkACL:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      Tags:
        - Key: Name
          Value: MY-Public-ACL-v1
      VpcId: !Ref myVPC
  myPrivateNetworkACL:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      Tags:
        - Key: Name
          Value: MY-Private-ACL-v1
      VpcId: !Ref myVPC
  IngressNetworklAclVPCALL:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref myPublicNetworkACL
      RuleNumber: '100'
      Protocol: '-1'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 10.0.0.0/24
      Icmp:
        Code: '-1'
        Type: '-1'
  # IngressNetworklAclSSH:
  #   Type: 'AWS::EC2::NetworkAclEntry'
  #   Properties:
  #     NetworkAclId: !Ref myPublicNetworkACL
  #     RuleNumber: '110'
  #     Protocol: '6'
  #     RuleAction: allow
  #     Egress: 'false'
  #     CidrBlock: ""
  #     Icmp:
  #       Code: '-1'
  #       Type: '-1'
  #     PortRange:
  #       From: '22'
  #       To: '22'
  IngressNetworklAclIPv4Range:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref myPublicNetworkACL
      RuleNumber: '120'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      Icmp:
        Code: '-1'
        Type: '-1'
      PortRange:
        From: '1024'
        To: '65535'
  IngressNetworklAclHTTP:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref myPublicNetworkACL
      RuleNumber: '130'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      Icmp:
        Code: '-1'
        Type: '-1'
      PortRange:
        From: '80'
        To: '80'
  IngressNetworklAclHTTPS:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref myPublicNetworkACL
      RuleNumber: '140'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      Icmp:
        Code: '-1'
        Type: '-1'
      PortRange:
        From: '443'
        To: '443'
  EngressNetworklAclVPCALL:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref myPublicNetworkACL
      RuleNumber: '100'
      Protocol: '-1'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 10.0.0.0/24
      Icmp:
        Code: '-1'
        Type: '-1'
  EngressNetworklAclSSH:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref myPublicNetworkACL
      RuleNumber: '110'
      Protocol: '6'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '22'
        To: '22'
  EngressNetworklAclIPv4Range:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref myPublicNetworkACL
      RuleNumber: '120'
      Protocol: '6'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      Icmp:
        Code: '-1'
        Type: '-1'
      PortRange:
        From: '1024'
        To: '65535'
  EngressNetworklAclHTTP:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref myPublicNetworkACL
      RuleNumber: '130'
      Protocol: '6'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      Icmp:
        Code: '-1'
        Type: '-1'
      PortRange:
        From: '80'
        To: '80'
  EngressNetworklAclHTTPS:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref myPublicNetworkACL
      RuleNumber: '140'
      Protocol: '6'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      Icmp:
        Code: '-1'
        Type: '-1'
      PortRange:
        From: '443'
        To: '443'
  PublicSubnet1ACL:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      NetworkAclId: !Ref myPublicNetworkACL
      SubnetId: !Ref PublicSubnet1
  PublicSubnet2ACL:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      NetworkAclId: !Ref myPublicNetworkACL
      SubnetId: !Ref PublicSubnet2
  PublicSubnet3ACL:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      NetworkAclId: !Ref myPublicNetworkACL
      SubnetId: !Ref PublicSubnet3